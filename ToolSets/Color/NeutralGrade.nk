set cut_paste_input [stack 0]
push $cut_paste_input
Group {
 name NeutralGrade
 tile_color 0x6c9de1ff
 addUserKnob {20 NeutralGrade_tab l NeutralGrade}
 addUserKnob {26 match_label l "@b;match" T ""}
 addUserKnob {18 msrc l "src color"}
 msrc 0.18
 addUserKnob {18 mdst l "dst color"}
 mdst 0.18
 addUserKnob {18 bp l blackpoint t "this value will be subtracted from the offset" R -0.1 0.1}
 bp 0
 addUserKnob {22 set_blackpoint l "Set Blackpoint" t "Set blackpoint based on selected region in the viewer." T "node = nuke.thisNode()\nbpp = node\['bpp'].getValue()\n\nnuke.root().begin()\n\n# Get viewer and connected node to calculate format resolution\navn = nuke.activeViewer().node()\nif avn.input(0):\n    vn = viewer.input(0)\n    if not nuke.selectedNodes():\n        vn.setSelected(1)\nelse:\n    vn = nuke.activeViewer().node()\n\n# Get selected sample area\nbbox = nuke.activeViewer().node()\['colour_sample_bbox'].value()\nar = float(vn.width() * vn.pixelAspect()) / float(vn.height())\nc0 = \[(bbox\[0]*0.5+0.5) * vn.width(), (((bbox\[1] * 0.5) + (0.5/ar)) * ar) * vn.height()]\nc1 = \[(bbox\[2]*0.5+0.5) * vn.width(), (((bbox\[3] * 0.5) + (0.5/ar)) * ar) * vn.height()]\na = \[c1\[0] - c0\[0], c1\[1] - c0\[1]]\nc = \[c0\[0] + (a\[0]/2), c0\[1] + (a\[1] / 2)]\n\n# Reset blackpoint and add knob\nnode\['bp'].setValue(\[0, 0, 0])\nadd = node\['add'].getValue()\nnode\['add'].setValue(\[0, 0, 0])\n\n# Sample input colors within box\ncs = \[\n    node.sample('rgba.red', c\[0], c\[1], a\[0], a\[1]), \n    node.sample('rgba.green', c\[0], c\[1], a\[0], a\[1]), \n    node.sample('rgba.blue', c\[0], c\[1], a\[0], a\[1])\n    ]\n\nif bpp:\n    av = (cs\[0] + cs\[1] + cs\[2]) / 3.0\n    cs = \[v - av for v in cs]\n\n# Set blackpoint to sampled value\nnode\['bp'].setValue(cs)\nnode\['add'].setValue(add)\n" +STARTLINE}
 addUserKnob {6 bpp l neutralize t "Set Blackpoint will only neutralize the RGB values." -STARTLINE}
 bpp true
 addUserKnob {22 reset_match l Reset T "n = nuke.thisNode()\nn\['bp'].setValue(0)\nn\['add'].setValue(0)\nn\['msrc'].setValue(0.18)\nn\['mdst'].setValue(0.18)" +STARTLINE}
 addUserKnob {26 grade_label l "@b; grade" T " "}
 addUserKnob {7 ex l exposure t "adjust exposure in stops" R -4 4}
 addUserKnob {18 _m l tint R 0 4}
 _m 1
 addUserKnob {18 add R -0.1 0.1}
 add 0
 addUserKnob {22 reset_grade l Reset T "n = nuke.thisNode()\nn\['ex'].setValue(0)\nn\['_m'].setValue(1)\nn\['add'].setValue(0)" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {41 direction T OCIOCDLTransform.direction}
 addUserKnob {41 working_space l "working space" -STARTLINE T OCIOCDLTransform.working_space}
 addUserKnob {26 cdl_calc_label l " " T "<b>calculated slope offset</b>"}
 addUserKnob {41 slope T OCIOCDLTransform.slope}
 addUserKnob {41 offset T OCIOCDLTransform.offset}
}
 Input {
  inputs 0
  name Input
  xpos -370
  ypos -418
 }
 OCIOCDLTransform {
  slope {{mdst/msrc*(_m/((_m.r+_m.g+_m.b)/3))*2**ex} {mdst/msrc*(_m/((_m.r+_m.g+_m.b)/3))*2**ex} {mdst/msrc*(_m/((_m.r+_m.g+_m.b)/3))*2**ex}}
  offset {{add-bp} {add-bp} {add-bp}}
  name OCIOCDLTransform
  xpos -370
  ypos -370
 }
 Output {
  name Output
  xpos -370
  ypos -322
 }
end_group
