set cut_paste_input [stack 0]
push $cut_paste_input
Group {
 name Writeffmpeg
 tile_color 0xbfbf00ff
 addUserKnob {20 ffmpeg}
 addUserKnob {35 presets M {"Prores 422" "knobs this \{ffmpeg_args \"-c:v prores_ks -profile:v 2 -qscale:v 7 -pix_fmt yuv444p10le -r 24 -vf colormatrix=bt601:bt709 -vendor ap10 -metadata:s encoder=\\\"Apple ProRes 422\\\"\" framerate 24 label \"Prores 422\"\}" "Prores 422 HQ" "knobs this \{ffmpeg_args \"-c:v prores_ks -profile:v 3 -qscale:v 7 -pix_fmt yuv444p10le -r 24 -vf colormatrix=bt601:bt709 -vendor ap10 -metadata:s encoder=\\\"Apple ProRes 422 HQ\\\"\" framerate 24 label \"Prores 422 HQ\"\}" "Prores 4444" "knobs this \{ffmpeg_args \"-c:v prores_ks -profile:v 4 -qscale:v 5 -pix_fmt yuv444p10le -r 24 -vf colormatrix=bt601:bt709 -vendor ap10 -metadata:s encoder=\\\"Apple ProRes 4444\\\"\\\"\" framerate 24 label \"Prores 4444\"\}" "DNxHD 36" "knobs this \{ffmpeg_args \"-c:v dnxhd -profile:v dnxhd -pix_fmt yuv422p -b:v 36M -vf \\\"scale=1920:1080,fps=24000/1001,colormatrix=bt601:bt709\\\"\" framerate 23.976 label \"DNxHD 36\"\}" "DNxHD 115" "knobs this \{ffmpeg_args \"-c:v dnxhd -profile:v dnxhd -pix_fmt yuv422p -b:v 115M -vf \\\"scale=1920:1080,fps=24000/1001,colormatrix=bt601:bt709\\\"\" framerate 23.976 label \"DNxHD 115\"\}" "DNxHD 175" "knobs this \{ffmpeg_args \"-c:v dnxhd -profile:v dnxhd -pix_fmt yuv422p -b:v 175M -vf \\\"scale=1920:1080,fps=24000/1001,colormatrix=bt601:bt709\\\"\" framerate 23.976 label \"DNxHD 175\"\}" "DNxHD 175 10bit" "knobs this \{ffmpeg_args \"-c:v dnxhd -profile:v dnxhd -pix_fmt yuv422p10 -b:v 175M -vf \\\"scale=1920:1080,fps=24000/1001,colormatrix=bt601:bt709\\\"\" framerate 23.976 label \"DNxHD 175 10bit\"\}" "DNxHD 220 10bit" "knobs this \{ffmpeg_args \"-c:v dnxhd -profile:v dnxhd -pix_fmt yuv422p10 -b:v 220M -vf \\\"scale=1920:1080,fps=24000/1001,colormatrix=bt601:bt709\\\"\" framerate 23.976 label \"DNxHD 220 10bit\"\}" "DNxHR HQ" "knobs this \{ffmpeg_args \"-c:v dnxhd -profile:v dnxhr_hq -pix_fmt yuv422p -vf \\\"colormatrix=bt601:bt709\\\"\" framerate 24 label \"DNxHR HQ\"\}" "DNxHR HQX" "knobs this \{ffmpeg_args \"-c:v dnxhd -profile:v dnxhr_hqx -pix_fmt yuv422p10le -vf \\\"colormatrix=bt601:bt709\\\"\" framerate 24 label \"DNxHR HQX\"\}" "DNxHR 444" "knobs this \{ffmpeg_args \"-c:v dnxhd -profile:v dnxhr_444 -pix_fmt yuv444p10le -vf \\\"colormatrix=bt601:bt709\\\"\" framerate 24 label \"DNxHR 444\"\}" "h264 standard" "knobs this \{ffmpeg_args \"-c:v libx264 -profile:v high -crf 15 -preset slow -tune film -pix_fmt yuv420p -g 4 -bf 2 -vf colormatrix=bt601:bt709\" framerate 24 label \"h264 standard\"\}" "h264 intra" "knobs this \{ffmpeg_args \"-c:v libx264 -profile:v high -crf 12 -preset slow -tune film -pix_fmt yuv420p -g 1 -bf 0 -vf colormatrix=bt601:bt709\" framerate 24 label \"h264 intra\"\}" "h264 intra 444" "knobs this \{ffmpeg_args \"-c:v libx264 -profile:v high444 -crf 12 -preset slow -tune film -pix_fmt yuv444p -g 1 -bf 0 -vf colormatrix=bt601:bt709\" framerate 24 label \"h264 intra 444\"\}" "h264 intra 444 10bit" "knobs this \{ffmpeg_args \"-c:v libx264 -profile:v high444 -crf 12 -preset slow -tune film -pix_fmt yuv444p10le -g 1 -bf 0 -vf colormatrix=bt601:bt709\" framerate 24 label \"h264 intra 444 10bit\"\}" "h265 standard 10bit" "knobs this \{ffmpeg_args \"-c:v libx265 -profile:v main10 -crf 15 -preset slow -tune psnr -pix_fmt yuv420p10le -g 2 -bf 0 -vf colormatrix=bt601:bt709\" framerate 24 label \"h265 standard 10bit\"\}" "h265 intra 422 10bit" "knobs this \{ffmpeg_args \"-c:v libx265 -profile:v main422-10-intra -crf 12 -preset slow -tune psnr -pix_fmt yuv422p10le -g 1 -bf 0 -vf colormatrix=bt601:bt709\" framerate 24 label \"h265 intra 10bit\"\}" "h265 intra 444 10bit" "knobs this \{ffmpeg_args \"-c:v libx265 -profile:v main444-10-intra -crf 12 -preset slow -tune psnr -pix_fmt yuv444p10le -g 1 -bf 0 -vf colormatrix=bt601:bt709\" framerate 24 label \"h265 intra 444 10bit\"\}" ""}}
 addUserKnob {2 file t "output file"}
 addUserKnob {7 framerate R 23 30}
 framerate 24
 addUserKnob {1 ffmpeg_args l "ffmpeg args"}
 addUserKnob {1 ffmpeg_cmd l "ffmpeg command" t "Enter the path to the ffmpeg executable. \n\nffmpeg without a path will use the environment."}
 ffmpeg_cmd ffmpeg
 addUserKnob {1 framerange -STARTLINE}
 addUserKnob {22 set_framerange l "Set to Input" -STARTLINE T "n = nuke.thisNode()\nfr = n.frameRange()\nn\['framerange'].setValue(\"\{0\}-\{1\}\".format(fr.first(), fr.last()))"}
 addUserKnob {22 render l Render T "from __future__ import with_statement\nfrom __future__ import print_function\nfrom __future__ import division\nimport os, sys\nimport subprocess, shlex\nimport argparse\nimport tempfile\nsys.path.insert(0, '/usr/lib64/python2.7/site-packages/')\nimport numpy as np\nfrom libtiff import TIFF\nimport nuke\n\n\nfrom sys import platform as __platform\nif __platform == \"linux\" or __platform == \"linux2\":\n    _platform = 'linux'\nelif __platform == \"darwin\":\n    _platform = 'osx'\nelif __platform == \"win32\":\n    _platform = 'win'\n\n\ndef frames_to_tc(total_frames, frame_rate):\n    fps_int = int(round(frame_rate))\n    smpte_token = \":\"\n    hours = int(total_frames / (3600 * fps_int))\n    minutes = int(total_frames / (60 * fps_int) % 60)\n    seconds = int(total_frames / fps_int % 60)\n    frames = int(total_frames % fps_int)\n    return \"%02d:%02d:%02d%s%02d\" % (hours, minutes, seconds, smpte_token, frames)\n\ndef terminal_render():\n    parser = argparse.ArgumentParser(description='Render from Nuke to ffmpeg.')\n    parser.add_argument(\"nuke_script\",\n                        help=\"Nuke script to render.\")\n    parser.add_argument(\"-X\", \"--write\",\n                        help=\"Name of the WriteFFMPEG node to render.\")\n    parser.add_argument(\"-F\", \"--framerange\",\n                        help=\"framerange to render. Please specify <start>-<end>.\",\n                        required=False)\n    parser.add_argument(\"-o\", \"--output\",\n                        help=\"Output qt to render to. Will use the value of the file knob on the WriteFFMPEG node if not specified.\",\n                        required=False)\n    args = parser.parse_args()\n    nuke_script = args.nuke_script\n    nuke.scriptOpen(nuke_script)\n    node = nuke.toNode(args.write)\n    node.begin()\n    write = nuke.toNode('write_tmp')\n    if args.framerange and \"-\" in args.framerange:\n        fr = nuke.FrameRange()\n        fr.setLast(int(args.framerange.split('-')\[-1]))\n        fr.setFirst(int(args.framerange.split('-')\[0]))\n    else:\n        node_framerange = node\['framerange'].getValue()\n        if node_framerange and \"-\" in node_framerange:\n            fr = nuke.FrameRange()\n            fr.setLast(int(node_framerange.split('-')\[-1]))\n            fr.setFirst(int(node_framerange.split('-')\[0]))\n        else:\n            fr = node.frameRange()\n\n    tmpimg = tempfile.mkstemp('.tiff', \"ffmpeg_temp_\")\[1]\n    write\['file'].setValue(tmpimg)\n    framerate = node\['framerate'].getValue()\n    output = node\['file'].getValue()\n    tc = frames_to_tc(fr.first(), framerate)\n    ffmpeg_args = \"ffmpeg -hide_banner -loglevel info -y \\\n        -f rawvideo -pixel_format rgb48le -video_size \{0\}x\{1\} \\\n        -framerate \{2\} -i pipe:0 -timecode \{3\} \{4\} \{5\}\".format(\n            node.width(), node.height(), framerate, tc,\n            node\['ffmpeg_args'].getValue(), output)\n    print(ffmpeg_args)\n    ffproc = subprocess.Popen(\n        shlex.split(ffmpeg_args),\n        stdin=subprocess.PIPE,\n        stdout=subprocess.PIPE\n        )\n    for i, f in enumerate(fr):\n        nuke.execute(write, f, f)\n        print(\"Rendering frame \\t\{0\} of \{1\}\".format(i, fr.frames()))\n        img = TIFF.open(tmpimg, mode='r')\n        img = img.read_image()\n        img.tofile(ffproc.stdin)\n        os.remove(tmpimg)\n    result, error = ffproc.communicate()\n\nif __name__==\"__main__\":\n    terminal_render()\n\n\ndef prep():\n    nuke.scriptSave()\n    node = nuke.thisNode()\n    ffpy = __file__\n    ffpy = ffpy.replace('pyc', 'py')\n    node_framerange = node\['framerange'].getValue()\n\n    nk_cmd = \"\{0\} -t \{1\} \{2\} --write \{3\} --output \{4\}\".format(\n        nuke.EXE_PATH,\n        ffpy,\n        nuke.root().knob(\"name\").value(),\n        node.fullName(),\n        node\['file'].getValue())\n    print(\"RENDER COMMAND:\\n\\t\{0\}\".format(nk_cmd))\n    if _platform == \"win\":\n        nuke.message(\"Windows not supported.\")\n        return\n    if _platform == \"osx\":\n        cmd = '''osascript 2>/dev/null <<EOF\n                tell application \"Terminal\"\n                  if not (exists window 1) then reopen\n                  activate\n                  do script \"\{0\}\"\n                end tell\n                EOF'''.format(nk_cmd)\n    elif _platform == \"linux\":\n        # cmd = 'xterm -e \"bash \{0\}\"'.format(nk_cmd)\n        cmd = 'gnome-terminal -e \"bash -c \\\\\"\{0\}; exec bash\\\\\"\"'.format(nk_cmd)\n        #cmd = 'gnome-terminal -e \"bash -c \\\\\"\{0\}\\\\\"\"'.format(nk_cmd)\n    subprocess.Popen(cmd, shell=True)\n\nif __name__==\"__main__\":\n    prep()" +STARTLINE}
}
 Input {
  inputs 0
  name Input
  xpos -40
  ypos -10
 }
 Write {
  raw true
  file_type tiff
  datatype "16 bit"
  compression none
  checkHashOnRead false
  version 486
  name write_tmp
  selected true
  xpos -40
  ypos 98
 }
 Output {
  name Output
  xpos -40
  ypos 230
 }
end_group
