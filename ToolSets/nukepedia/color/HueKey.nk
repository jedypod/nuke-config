set cut_paste_input [stack 0]
push $cut_paste_input
Group {
 name HueKey
 knobChanged "\nchromaList = \[\"chromaline\", \"txtch\", \"thresa\", \"thresb\",\"txt4\",\"div\", \"lumaperc\",\"txt3\"]\nhueList = \[\"divhue\", \"huemult\"]\nthisNode = nuke.thisNode()\nk = nuke.thisKnob()\nif k.name() == 'mode':\n    \n    if k.getValue() == 0:\n        for i in chromaList:\n            thisNode\[i].setVisible(False)\n        for i in hueList:\n            thisNode\[i].setVisible(True)\n\n    elif k.getValue() == 1:\n        for i in hueList:\n            thisNode\[i].setVisible(False)\n        for i in chromaList:\n            thisNode\[i].setVisible(True)\n\n"
 tile_color 0x14736ff
 addUserKnob {20 aa_HueKey}
 addUserKnob {41 "Local GPU: " T BlinkScript7.gpuName}
 addUserKnob {41 "Use GPU if Available" T BlinkScript7.useGPUIfAvailable}
 addUserKnob {41 vectorize l "Vectorize on CPU" -STARTLINE T BlinkScript7.vectorize}
 addUserKnob {26 ""}
 addUserKnob {41 aa_HueKey_key_point l "Custom Colour" T BlinkScript7.aa_HueKey_key_point}
 addUserKnob {4 mode l Select M {"Hue only" "Chroma + Luma"}}
 mode "Chroma + Luma"
 addUserKnob {6 chkalpha l "Ouput alpha as rgba" -STARTLINE}
 addUserKnob {6 chkunp l "Alpha unpremultiplied" -STARTLINE}
 addUserKnob {26 txt l "" +STARTLINE T " "}
 addUserKnob {26 divhue l Hue +HIDDEN}
 addUserKnob {7 huemult l Multiplier t "Hue mask fine tuning" +HIDDEN R 0 2}
 huemult 0.7
 addUserKnob {26 chromaline l Chroma}
 addUserKnob {26 txtch l "" +STARTLINE T "Better tweak \"Luma Accuracy\" rather than the chroma thresholds."}
 addUserKnob {7 thresb l "Lower Threshold"}
 addUserKnob {7 thresa l "Upper Threshold"}
 thresa 0.755
 addUserKnob {26 txt4 l "" +STARTLINE T " "}
 addUserKnob {26 div l Luma}
 addUserKnob {7 lumaperc l "Luma Accuracy" t "Standard value on 0.2-0.3, higher values will get a more accurate luma key, usually not necessary" R 0 0.999}
 lumaperc 0.91
 addUserKnob {26 txt3 l "" +STARTLINE T " "}
 addUserKnob {26 div2 l "Overall Post Process"}
 addUserKnob {7 blp l Blackpoint R -1 1}
 addUserKnob {7 whtp l Whitepoint R 0 2}
 whtp 1
 addUserKnob {7 gam l Gamma R 0.1 3}
 gam 1
 addUserKnob {26 txtaut l "" +STARTLINE T " "}
 addUserKnob {26 author l "" +STARTLINE T "aa_HueKey v1.0 by Asier Aparicio, 2018"}
}
 Constant {
  inputs 0
  channels rgb
  color {{parent.BlinkScript7.aa_HueKey_key_point} {parent.BlinkScript7.aa_HueKey_key_point} {parent.BlinkScript7.aa_HueKey_key_point} {parent.BlinkScript7.aa_HueKey_key_point}}
  name Constant1
  xpos 1820
  ypos 52
  postage_stamp false
 }
set Nf94c2c0 [stack 0]
 Colorspace {
  colorspace_out HSL
  name Colorspace2
  xpos 1944
  ypos 77
 }
push $Nf94c2c0
 Colorspace {
  colorspace_out YCbCr
  name Colorspace1
  xpos 1820
  ypos 86
 }
 Copy {
  inputs 2
  from0 rgba.blue
  to0 rgba.red
  name Copy1
  xpos 1820
  ypos 191
 }
 Input {
  inputs 0
  name Input
  xpos 1492
  ypos -143
 }
 Dot {
  name Dot1
  note_font "Bitstream Vera Sans"
  xpos 1526
  ypos -36
 }
 Shuffle {
  name Shuffle1
  xpos 1492
  ypos -10
 }
set N81f6aa0 [stack 0]
 Unpremult {
  name Unpremult4
  xpos 1719
  ypos 50
 }
 Colorspace {
  colorspace_out HSL
  name Colorspace6
  xpos 1719
  ypos 90
 }
push $N81f6aa0
 Unpremult {
  name Unpremult2
  xpos 1602
  ypos 49
 }
 Colorspace {
  colorspace_out YCbCr
  name Colorspace4
  xpos 1602
  ypos 91
 }
push $N81f6aa0
 BlinkScript {
  inputs 4
  recompileCount 202
  ProgramGroup 1
  KernelDescription "2 \"aa_HueKey\" iterate pixelWise 4cd7a64bb516c2720ffccb5504d29a5d7a37e152263cd79589b4b9c8e8f0d1c4 5 \"src\" Read Point \"src_ycbcr\" Read Point \"src_hsl\" Read Point \"pick_Lcbcr\" Read Point \"dst\" Write Point 11 \"key_point\" Float 4 AAAAAAAAAAAAAAAAAAAAAA== \"mode\" Int 1 AAAAAA== \"chk_alpha\" Int 1 AAAAAA== \"chk_unp\" Int 1 AAAAAA== \"op_multiplier\" Float 1 AAAAAA== \"tola\" Float 1 AAAAAA== \"tolb\" Float 1 AAAAAA== \"luma_acc\" Float 1 AAAAAA== \"blackpoint\" Float 1 AAAAAA== \"whitepoint\" Float 1 AAAAAA== \"gamma\" Float 1 AAAAAA== 11 \"key_point\" 4 1 \"mode\" 1 1 \"chk_alpha\" 1 1 \"chk_unp\" 1 1 \"op_multiplier\" 1 1 \"tola\" 1 1 \"tolb\" 1 1 \"luma_acc\" 1 1 \"blackpoint\" 1 1 \"whitepoint\" 1 1 \"gamma\" 1 1 4 \"lift\" Float 1 1 AAAAAA== \"gain\" Float 1 1 AAAAAA== \"multiply\" Float 1 1 AAAAAA== \"offset\" Float 1 1 AAAAAA=="
  kernelSource "//------- aa_HueKey, by Asier Aparicio 2018 -------//\n\n// key luminance between two points\nstatic float luminance_op(const float luminance, const float point_ref)\{\n\tfloat ret = (1- fabs(point_ref - luminance));\n\tret = clamp(ret, 0.0f,1.0f);\n\treturn ret;\n\}\n\n//decides if a color is close to the specified hue\nstatic float colorclose(float Cb_p, float Cr_p, float Cb_key,float Cr_key, float tola,float tolb) \{ \n\n\tfloat temp = sqrt(( pow((Cb_key-Cb_p),2) + pow((Cr_key-Cr_p),2) )); \n\n\tif (temp < tola)\{\n\t\treturn (0.0f);\n\t\} else if(temp < tolb) \{\n\t\treturn ((temp-tola)/(tolb-tola));\n\t\}else\{\n\t\treturn (1.0f);\n\t\} \n\treturn temp;\n\} \n\n//grade node\nstatic float grade_alpha (float in, float blackpoint, float whitepoint, float lift, float gain, float multiply, float offset, float gamma)\{\n\n\tfloat a, b, out;\n\n\ta = multiply * (gain-lift) / (whitepoint-blackpoint);\n\tb = offset + lift - a * blackpoint; \n\tout = pow( (a*in+b),(1.0f/gamma) );\n\n\treturn out;\n\}\n\n//gamma op\nstatic float simple_gamma(float in, float amount)\{\n\treturn pow(in, (1/amount));\n\}\n\n\n// main algorithms to get the spill\nfloat4 get_spill(\n\tconst float4 in, \n\tconst float grade_mult\n\t)\{\n\n\tfloat r = in.x;\n\tfloat g = in.y;\n\tfloat b = in.z;\n\tfloat4 spill;\n\n\tspill.y = g - (max(r,b)) *grade_mult; \t\t// max operation\n\n\tspill.x = 0.0f; \t\t\t\t\t\t\t// red channel to 0\n\tspill.y = clamp (spill.y, 0.0f, 1000.0f); \t// clamp lower than 0 on green channel\n\tspill.z = 0.0f; \t\t\t\t\t\t\t// blue channel to 0\n\n\n\t//deal with alpha\n\tspill.w = spill.y;\t\t\t\t\t\t\t// spill to alpha\n\n\treturn spill;\n\}\n\n//apply a hue rotation to an image in degrees\nstatic float4 hueTransform(const float4 in, const float hue_rot) \{\t// (rgba in, hue rotation in degrees)\n\tfloat4 out;\n\tconst float cos_h = cos(hue_rot*3.14159265f/180); \t\t\t\t// convert degrees to radians\n\tconst float sin_h = sin(hue_rot*3.14159265f/180); \n\n\t//calculate the rotation matrix\n\tfloat rot_matrix\[3]\[3] = \{\{cos_h + (1.0f - cos_h) / 3.0f, 1.0f/3.0f * (1.0f - cos_h) - sqrt(1.0f/3.0f) * sin_h, 1.0f/3.0f * (1.0f - cos_h) + sqrt(1.0f/3.0f) * sin_h\},\n\t\t\{1.0f/3.0f * (1.0f - cos_h) + sqrt(1.0f/3.0f) * sin_h, cos_h + 1.0f/3.0f*(1.0f - cos_h), 1.0f/3.0f * (1.0f - cos_h) - sqrt(1.0f/3.0f) * sin_h\},\n\t\t\{1.0f/3.0f * (1.0f - cos_h) - sqrt(1.0f/3.0f) * sin_h, 1.0f/3.0f * (1.0f - cos_h) + sqrt(1.0f/3.0f) * sin_h, cos_h + 1.0f/3.0f * (1.0f - cos_h)\}\};\n\n\t//Use the rotation matrix to convert the RGB \n\tout.x = in.x*rot_matrix\[0]\[0] + in.y*rot_matrix\[0]\[1] + in.z*rot_matrix\[0]\[2];\n\tout.y = in.x*rot_matrix\[1]\[0] + in.y*rot_matrix\[1]\[1] + in.z*rot_matrix\[1]\[2];\n\tout.z = in.x*rot_matrix\[2]\[0] + in.y*rot_matrix\[2]\[1] + in.z*rot_matrix\[2]\[2];\n\tout.w = in.w;\n\n\treturn out;\n\}\n\n//project rgb cube (colour's 3d point) onto hsv \"plane\", return color's vector on the other plane\nfloat3 projectRGBcolour (const float3 u1)\{\n\tfloat3 u2 = float3(1.0f,1.0f,1.0f); //  u2 is the normal of the hsv \"plane\", black to white, from 0,0,0 to 1,1,1\n\tfloat3 ortProj;\n\tortProj =  float(dot(u1,u2)) / float(dot(u2,u2)) * u2; //orthogonal projection of u1 onto u2\n\treturn u1-ortProj ; //return substraction of vectors, to get the proj of the rgb point onto hsv's plane\n\}\n\n// calculates angle (radians) between two 3d vectors\nfloat vectorAngle(const float3 v1, const float3 v2)\{  \n\n\tfloat angle = acos(float(dot(v1,v2))/float(sqrt(dot(v1,v1)*dot(v2,v2)))); //returns angle between 0-180\n\n\t//check if angle is really more than 180 degrees (comparing to plane's normal), if so apply sign to the angle\n\tfloat3 cross_product = cross(v1,v2);\n\tfloat3 plane_normal = float3(1.0f,1.0f,1.0f);\n\tif (dot(plane_normal,cross_product)<0)\{\n\t\tangle = -angle;\n\t\treturn angle;   //returns radians\n\t\}else\{\n\t\treturn angle;   //returns radians\n\t\}\n\}\n\n\nkernel aa_HueKey : ImageComputationKernel<ePixelWise>\n\{\n\tImage<eRead, eAccessPoint, eEdgeClamped> src;\n\tImage<eRead, eAccessPoint, eEdgeClamped> src_ycbcr;\n\tImage<eRead, eAccessPoint, eEdgeClamped> src_hsl;\n\tImage<eRead, eAccessPoint, eEdgeClamped> pick_Lcbcr;\n\tImage<eWrite> dst;\n\n\tparam:\n\tfloat4 key_point;\n\tint mode;\n\tint chk_alpha;\n\tint chk_unp;\n\t//hue params\n\tfloat op_multiplier;\n\t//chroma + luma params\n\tfloat tola, tolb;\n\tfloat luma_acc; //blackpoint\n\t//overall processing\n\tfloat blackpoint, whitepoint, gamma;\n\n\tlocal:\n\tfloat lift, gain, multiply, offset;\n\n\tvoid init()\{\n\t\tlift = 0.0f;\n\t\tgain = 1.0f;\n\t\tmultiply = 1.0f; \n\t\toffset = 0.0f;\n\t\}\n\n\tvoid process()\{\n\t\t// chroma+luma variables\n\t\tfloat cbcr_dist;\n\t\tfloat luminance_dist;\n\t\t//hue variables\n\t\tfloat angle_between;\n\t\tfloat4 rot_spill;\n\t\tfloat4 src_unp;\n\t\t//overall variable\n\t\tfloat alpha_result;\n\n\n\t\tif (mode==1)\{\t// chroma + luma\n\n\t\t\t//calculate chroma distance (with some gamma) and luma distance.\n\t\t\tcbcr_dist = 1- colorclose (src_ycbcr()\[1], src_ycbcr()\[2], pick_Lcbcr()\[1], pick_Lcbcr()\[2], tola, tolb );\n\t\t\tcbcr_dist = simple_gamma(cbcr_dist,0.05);\n\t\t\tluminance_dist = luminance_op(src_hsl()\[2], pick_Lcbcr()\[0]);\n\n\t\t\tif (luma_acc!=0.0f)\{\t//avoid luma grade calculation if 0.0\n\t\t\t\tluminance_dist = grade_alpha (luminance_dist, luma_acc,  1.0f,  0.0f,  1.0f,  1.0f,  0.0f,  1.0f);\n\t\t\t\}\n\n\t\t\talpha_result = cbcr_dist*luminance_dist;\t//chroma masked by luma\n\n\t\t\tif (blackpoint == 0.0f && whitepoint == 1.0f && gamma == 1.0f)\{ //avoid alpha grade calculation\n\t\t\t\talpha_result = alpha_result;\n\t\t\t\}else \{\n\t\t\t\talpha_result = grade_alpha (alpha_result, blackpoint, whitepoint, 0.0f,  1.0f,  1.0f,  0.0f, gamma );\t//overall processing\n\t\t\t\}\n\n\t\t\talpha_result = (clamp(alpha_result, 0.0f,1.0f));\t//clamp alpha \n\t\t\tif (chk_unp == 0)\{\t\t\t\t\t\t\t\t\t//premult alpha if unchecked\n\t\t\t\talpha_result *= src()\[3];\n\t\t\t\}\n\n\t\t\t////-------OUTPUTS-------////\n\t\t\tif (chk_alpha == 0)\{\n\t\t\t\tdst() = float4(src()\[0],src()\[1],src()\[2],alpha_result);\n\t\t\t\}else\{\n\t\t\t\tdst() = alpha_result;\n\t\t\t\}\n\n\n\t\t\}else\{\t\t// hue option\n\n\t\t\t//unpremult rgb, maintain alpha\n\t\t\tsrc_unp.x = src()\[0]/src()\[3];\n\t\t\tsrc_unp.y = src()\[1]/src()\[3];\n\t\t\tsrc_unp.z = src()\[2]/src()\[3];\n\t\t\tsrc_unp.w = src()\[3];\n\n\t\t\t//calculate angle betwen picked colour and green, and huerotate the source\n\t\t\tangle_between = vectorAngle(projectRGBcolour(float3(0.0f,1.0f,0.0f)),projectRGBcolour(float3(key_point.x,key_point.y,key_point.z))); //angle between green (0,1,0) on hsv and custom spill\n\t\t\tangle_between = angle_between*180/3.14159265f;\n\t\t\trot_spill = hueTransform(src_unp, -angle_between);\t\n\n\t\t\t// huerotate spill back to normal\n\t\t\tfloat4 rotBack_spill;\n\t\t\tfloat4 spill = get_spill(rot_spill, op_multiplier); //get spill\n\n\n\n\t\t\tif (blackpoint == 0.0f && whitepoint == 1.0f && gamma == 1.0f)\{ //avoid alpha grade calculation\n\t\t\t\tspill.w  = spill.w ;\n\t\t\t\}else \{\n\t\t\t\tspill.w  = grade_alpha (spill.w , blackpoint, whitepoint, 0.0f,  1.0f,  1.0f,  0.0f, gamma );\t//overall processing\n\t\t\t\}\n\n\n\t\t\tspill.w = (clamp(spill.w, 0.0f,1.0f));\t\t\t\t//clamp alpha \n\t\t\tif (chk_unp == 0)\{\t\t\t\t\t\t\t\t\t//premult alpha\n\t\t\t\tspill.w *= src()\[3];\n\t\t\t\}\n\n\n\t\t\t//avoid processing if custom colour has the same value in all three channels\n\t\t\tif (key_point.x == key_point.y && key_point.y == key_point.z)\{\n\t\t\t\tdst() = src();\n\t\t\t\treturn;\n\t\t\t\}\n\n\n\t\t\t////-------OUTPUTS-------////\n\t\t\tif (chk_alpha == 0)\{\n\t\t\t\tdst() = float4(src()\[0],src()\[1],src()\[2],spill.w);\n\t\t\t\}else\{\n\t\t\t\tdst() = spill.w;\n\t\t\t\}\n\t\t\t\n\t\t\}\n\n\t\}\n\n\};"
  useGPUIfAvailable false
  rebuild ""
  aa_HueKey_key_point {1 0.9899229407 0.9974754453 1}
  aa_HueKey_mode {{parent.mode}}
  aa_HueKey_chk_alpha {{chkalpha}}
  aa_HueKey_chk_unp {{parent.chkunp}}
  aa_HueKey_op_multiplier {{parent.huemult}}
  aa_HueKey_tola {{abs(1-parent.thresa)}}
  aa_HueKey_tolb {{abs(1-parent.thresb)}}
  aa_HueKey_luma_acc {{parent.lumaperc}}
  aa_HueKey_blackpoint {{parent.blp}}
  aa_HueKey_whitepoint {{whtp}}
  aa_HueKey_gamma {{parent.gam}}
  rebuild_finalise ""
  name BlinkScript7
  xpos 1492
  ypos 191
 }
 Output {
  name Output
  xpos 1492
  ypos 326
 }
end_group
