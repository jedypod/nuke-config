set cut_paste_input [stack 0]
Group {
 inputs 0
 name CellNoise
 help "Based on Mathew Rickshaw's CellNoise\n\nhttps://gizmosandgames.com/2016/09/05/cellular-noise/\n\nCombined all noise functions into one blinkscript node, changed uint datatype to int so there is better support on the gpu.\n\nRemove problematic knobChanged and onCreate python callbacks\n\ngithub.com/jedypod"
 note_font Helvetica
 addUserKnob {20 CellNoise_tab l CellNoise}
 addUserKnob {4 type t "choose cellnoise algorithm" M {worley voronoi manhattan euclidian chebyshev "" "" ""}}
 addUserKnob {6 invert -STARTLINE}
 addUserKnob {6 clamp -STARTLINE}
 clamp true
 addUserKnob {7 z R 1 10000}
 z 1
 addUserKnob {7 size R 1 100}
 size 50
 addUserKnob {7 range R 0 10}
 range 1
 addUserKnob {7 gain R 0 2}
 gain 1
 addUserKnob {7 gamma R 0.1 2}
 gamma 1
 addUserKnob {26 "" +STARTLINE}
 addUserKnob {41 CellNoise_dark_col l dark_col T CellNoise.CellNoise_dark_col}
 addUserKnob {41 CellNoise_light_col l light_col T CellNoise.CellNoise_light_col}
 addUserKnob {20 transform l Transform}
 addUserKnob {12 translate}
 addUserKnob {7 rotate R -180 180}
 addUserKnob {14 scale R 0 100}
 scale 1
 addUserKnob {7 skewX l "skew X" R -1 1}
 addUserKnob {7 skewY l "skew Y" R -1 1}
 addUserKnob {4 skew_order l "skew order" t "Specifies which order the skew values should be applied in.\n" M {XY YX}}
 addUserKnob {12 center}
 center {1024 1024}
 addUserKnob {7 xrotate t "Rotation about X axis in 3D noise space." R 0 90}
 addUserKnob {7 yrotate t "Rotation about Y axis in 3D noise space." R 0 90}
}
 Axis2 {
  inputs 0
  xform_order TRS
  translate {{parent.translate.x} {parent.translate.y} {parent.z}}
  rotate {{parent.xrotate} {parent.yrotate} {parent.rotate}}
  scaling {{parent.scale.w} {parent.scale.h} 1}
  uniform_scale {{parent.size}}
  skew {{"parent.skewX * 45"} {"parent.skewY * 45"} 0}
  pivot {{parent.center.x} {parent.center.y} 0}
  name NoiseTransform
  xpos 80
  ypos 234
 }
 BlinkScript {
  inputs 0
  kernelSourceFile "/cave/dev/tool/nuke/nuketools-ext/developers/mathewshaw_gizmosandgames.com/NukeScript/CellNoise/Blink Scripts/CellNoise_002.cpp"
  recompileCount 41
  ProgramGroup 1
  KernelDescription "2 \"CellNoise\" iterate pixelWise d7735afd521b1fbb006bfb3738fa2bcbaa50d8c4021938e15e37103c5d30fd49 1 \"dst\" Write Point 9 \"noise_type\" Int 1 AAAAAA== \"range\" Float 1 AAAAAA== \"invert\" Bool 1 AA== \"gain\" Float 1 AAAAAA== \"gamma\" Float 1 AAAAAA== \"offset\" Float 1 AAAAAA== \"dark_col\" Float 4 AAAAAAAAAAAAAAAAAAAAAA== \"light_col\" Float 4 AAAAAAAAAAAAAAAAAAAAAA== \"transform\" Float 16 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== 9 \"noise_type\" 1 1 \"range\" 1 1 \"invert\" 1 1 \"gain\" 1 1 \"gamma\" 1 1 \"offset\" 1 1 \"dark_col\" 4 1 \"light_col\" 4 1 \"transform\" 16 1 4 \"fRange\" Float 1 1 AAAAAA== \"iRange\" Int 1 1 AAAAAA== \"transform_inv\" Float 16 1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA== \"z\" Float 1 1 AAAAAA=="
  kernelSource "// https://aftbit.com/cell-noise-2/\n\n# define MAX_DISTANCE_ARRAY 12\n\n// C++11\nconst int rand_multiplier = 48271;\nconst int rand_increment  = 0;\nconst int rand_modulus    = 2147483647;\n\nstatic int lcgRandom(int seed)\n\{\n  return abs((seed * rand_multiplier + rand_increment) % rand_modulus);\n\}\n\n// FNV Hash\nconst int OFFSET_BASIS = 2166136261;\nconst int FNV_PRIME = 16777619;\n\nstatic int hash(int i, int j, int k) \{\n  return ((((((OFFSET_BASIS ^ i) * FNV_PRIME) ^ j) * FNV_PRIME) ^ k) * FNV_PRIME);\n\}\n\n// Poisson Distribution\nconst int one   =  393325350;\nconst int two   = 1022645910;\nconst int three = 1861739990;\nconst int four  = 2700834071;\nconst int five  = 3372109335;\nconst int six   = 3819626178;\nconst int seven = 4075350088;\nconst int eight = 4203212043;\n\nstatic int probLookup(int value) \{\n  if (value < one) return 1;\n  if (value < two) return 2;\n  if (value < three) return 3;\n  if (value < four) return 4;\n  if (value < five) return 5;\n  if (value < six) return 6;\n  if (value < seven) return 7;\n  if (value < eight) return 8;\n  return 9;\n\}\n\n// Distance Functions\nstatic float EuclidianDistanceFunc(float3 p1, float3 p2) \{\n  return (p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y) + (p1.z - p2.z) * (p1.z - p2.z);\n\}\n\nstatic float ManhattanDistanceFunc(float3 p1, float3 p2) \{\n  return fabs(p1.x - p2.x) + fabs(p1.y - p2.y) + fabs(p1.z - p2.z);\n\}\n\nstatic float ChebyshevDistanceFunc(float3 p1, float3 p2) \{\n  float3 diff = p1 - p2;\n  return max(max(fabs(diff.x), fabs(diff.y)), fabs(diff.z));\n\}\n\n// Insertion Array for Voronoi Noise\nstatic void insert(float arr\[], int idArr\[], float value, int id) \{\n  float temp;\n  int tempID;\n  for (int i = MAX_DISTANCE_ARRAY - 1; i >= 0; i--) \{\n    if (value > arr\[i])\n      break;\n    temp = arr\[i];\n    tempID = idArr\[i];\n    arr\[i] = value;\n    idArr\[i] = id;\n    if (i + 1 < MAX_DISTANCE_ARRAY)\n    \{\n      arr\[i + 1] = temp;\n      idArr\[i + 1] = tempID;\n    \}\n  \}\n\}\n\n// Insertion Array for Manhattan, Euclidian, Chebyshev Noise\nstatic void insertM(float arr\[], float value)\n\{\n  float temp;\n  for (int i = MAX_DISTANCE_ARRAY - 1; i >= 0; i--)\n  \{\n    if (value > arr\[i])\n      break;\n    temp = arr\[i];\n    arr\[i] = value;\n    if (i + 1 < MAX_DISTANCE_ARRAY)\n    \{\n      arr\[i + 1] = temp;\n    \}\n  \}\n\}\n\nkernel CellNoise : ImageComputationKernel<ePixelWise> \{\n  Image<eWrite> dst;\n\n  param:\n    int noise_type;\n    float range;\n    bool invert;\n    float gain;\n    float gamma;\n    float offset;\n    float4 dark_col;\n    float4 light_col;\n    float4x4 transform;\n\n  local:\n    float fRange;\n    int iRange;\n    float4x4 transform_inv;\n    float z;\n\n  void init() \{\n    transform_inv = transform.invert();\n    z = transform_inv\[2]\[3];\n\n    // Used for Voronoi Noise\n    fRange = clamp(range, 0.0f, float(MAX_DISTANCE_ARRAY - 2));\n    iRange = int(fRange);\n  \}\n\n  static float3 multVectMatrix(float3 vec, float4x4 M) \{\n    float3 out = float3(\n      vec.x * M\[0]\[0] + vec.y * M\[0]\[1] + vec.z * M\[0]\[2] + M\[0]\[3],\n      vec.x * M\[1]\[0] + vec.y * M\[1]\[1] + vec.z * M\[1]\[2] + M\[1]\[3],\n      vec.x * M\[2]\[0] + vec.y * M\[2]\[1] + vec.z * M\[2]\[2] + M\[2]\[3]\n    );\n    return out;\n  \}\n\n  float4 getColour(float a) \{\n    return dark_col * (1 - a) + light_col * a;\n  \}\n\n  void process(int2 pos) \{\n    \n    //Declare some values for later use\n    int lastRandom, id, numberFeaturePoints;\n    float3 randomDiff, featurePoint;\n    int cubeX, cubeY, cubeZ;\n\n    // Worley Noise\n    float distance = 6666.0f;\n\n    // for Voronoi Noise\n    float distanceArray\[MAX_DISTANCE_ARRAY];\n    int idArray\[MAX_DISTANCE_ARRAY];\n    // Initialize values in distance array to large values\n    for (int i = 0; i < MAX_DISTANCE_ARRAY; i++)\n        distanceArray\[i] = 6666;\n\n\n    float3 input = float3(float(pos.x), float(pos.y), z);\n    input = multVectMatrix(input, transform_inv);\n\n    // Determine which cube the evaluation point is in\n    int evalCubeX = floor(input.x);\n    int evalCubeY = floor(input.y);\n    int evalCubeZ = floor(input.z);\n\n    for (int i = -1; i < 2; ++i) \{\n      for (int j = -1; j < 2; ++j) \{\n        for (int k = -1; k < 2; ++k) \{\n          cubeX = evalCubeX + i;\n          cubeY = evalCubeY + j;\n          cubeZ = evalCubeZ + k;\n\n          // Generate a reproducible random number generator for the cube\n          id = lcgRandom(hash(cubeX, cubeY, cubeZ));\n          // Determine how many feature points are in the cube\n          numberFeaturePoints = probLookup(id);\n          // Check each feature point\n          for (int l = 0; l < numberFeaturePoints; ++l) \{\n            lastRandom = lcgRandom(id);\n            randomDiff.x = float(lastRandom) / rand_modulus;\n\n            lastRandom = lcgRandom(lastRandom);\n            randomDiff.y = float(lastRandom) / rand_modulus;\n\n            lastRandom = lcgRandom(lastRandom);\n            randomDiff.z = float(lastRandom) / rand_modulus;\n\n            featurePoint = float3(randomDiff.x + float(cubeX), randomDiff.y + float(cubeY), randomDiff.z + float(cubeZ));\n            \n            if (noise_type == 0) \{\n              // Worley Noise\n              distance = min(distance, length(input - featurePoint));\n            \} else if (noise_type == 1) \{\n              // Voronoi Noise\n              insert(distanceArray, idArray, length(input - featurePoint), id);\n            \} else if (noise_type == 2) \{\n              // Manhattan Noise\n              insertM(distanceArray, ManhattanDistanceFunc(input, featurePoint));\n            \} else if (noise_type == 3) \{\n              // Euclidian Noise\n              insertM(distanceArray, EuclidianDistanceFunc(input, featurePoint));\n            \} else if (noise_type == 4) \{\n              // Chebyshev Noise\n              insertM(distanceArray, ChebyshevDistanceFunc(input, featurePoint));\n            \}\n\n          \}\n        \}\n      \}\n    \}\n    // Worley Noise\n    if (!invert) \{ distance = 1.0f - distance; \}\n    distance = pow( distance * gain, 1/gamma ) + offset;\n  \n    // Voronoi Noise\n    float3 col = float3(float(idArray\[iRange]) / rand_modulus, 0.0f, 0.0f);\n    lastRandom = lcgRandom(idArray\[iRange]);\n    col.y = float(lastRandom) / rand_modulus;\n    lastRandom = lcgRandom(lastRandom);\n    col.z = float(lastRandom) / rand_modulus;\n\n    // Manhattan Noise, Euclidian Noise\n    float color = (distanceArray\[ iRange + 2 ] - distanceArray\[ iRange + 1 ]) * fmod(fRange, 1.0f) + distanceArray\[ iRange + 1] - distanceArray\[0];\n    if (invert) \{ color = 1.0f - color; \}\n    color = pow( (color + offset) * gain, 1/gamma );\n\n    if (noise_type == 0) \{\n      // Worley Noise\n      dst() = getColour(distance);\n    \} else if (noise_type == 1) \{\n      // Voronoi Noise\n      for(int component = 0; component < 3; component++)\n        dst(component) = pow( col\[component] * gain, gamma) + offset;\n      dst(3) = 1.0f;\n    \} else if (noise_type > 1)  \{\n      // Manhattan Noise, Euclidian Noise, Chebyshev Noise\n      dst() = getColour(color);\n    \}\n  \}\n\};"
  rebuild ""
  CellNoise_noise_type {{parent.type}}
  CellNoise_range {{parent.range}}
  CellNoise_invert {{parent.invert}}
  CellNoise_gain {{parent.gain}}
  CellNoise_gamma {{parent.gamma}}
  CellNoise_offset {{parent.offset}}
  CellNoise_light_col 1
  CellNoise_transform {
      {{parent.NoiseTransform.world_matrix.0} {parent.NoiseTransform.world_matrix.1} {parent.NoiseTransform.world_matrix.2} {parent.NoiseTransform.world_matrix.3}}
      {{parent.NoiseTransform.world_matrix.4} {parent.NoiseTransform.world_matrix.5} {parent.NoiseTransform.world_matrix.6} {parent.NoiseTransform.world_matrix.7}}
      {{parent.NoiseTransform.world_matrix.8} {parent.NoiseTransform.world_matrix.9} {parent.NoiseTransform.world_matrix.10} {parent.NoiseTransform.world_matrix.11}}
      {{parent.NoiseTransform.world_matrix.12} {parent.NoiseTransform.world_matrix.13} {parent.NoiseTransform.world_matrix.14} {parent.NoiseTransform.world_matrix.15}}
    }
  rebuild_finalise ""
  name CellNoise
  xpos -40
  ypos 248
 }
 Clamp {
  channels rgba
  name Clamp
  note_font Helvetica
  xpos -40
  ypos 303
  disable {{!parent.clamp}}
 }
 Output {
  name Output
  xpos -40
  ypos 350
 }
end_group
