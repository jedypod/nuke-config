Transform {
center {1024 576}
motionblur {{"\$gui ? motionblur_gui : 4"}}
shutteroffset centred
name TransformLink
help "<b>TransformLink</b>\n\nA Transform node with options for linking to a Tracker or a Transform node. \n\nAllows you to set a seperate identity transform frame from the linked Tracker. Select the link target and click 'Set Target', or set the link target by name. You can also bake the expression link into keyframes if you want it independant from the target node. \n\nThe transform Matchmoves or Stabilizes depending on what the parent tracker node is set to, but you can invert this by enabling the 'invert' checkbox."
label "mm: \[value link_target]"
selected true
xpos 1280
ypos -1382
addUserKnob {20 TrackLink}
addUserKnob {3 identity_frame l "Identity Frame"}
identity_frame 1
addUserKnob {22 identity_to_curframe l "Set to Current Frame" t "Set identity frame to current frame." -STARTLINE T nuke.thisNode().knob('identity_frame').setValue(nuke.frame())}
addUserKnob {22 del_relative l "Del Relative" t "Delete relative transformation.\n\nUse original Transform values in parent." -STARTLINE T "# Delete Rel - remove identity frame transformations on transform link\ndef del_relative():\n\tn = nuke.thisNode()\n\t# Get target node name\n\ttarget_name = n\['translate'].animation(0).expression().split(' - ')\[0].split('parent.')\[1].split('.translate')\[0]\n\tn.knob('translate').clearAnimated()\n\tn.knob('translate').setExpression('parent.\{0\}.translate'.format(target_name))\n\tn.knob('rotate').clearAnimated()\n\tn.knob('rotate').setExpression('parent.\{0\}.rotate'.format(target_name))\n\tn.knob('scale').clearAnimated()\n\tn.knob('scale').setExpression('parent.\{0\}.scale'.format(target_name))\n\tn.knob('skewX').clearAnimated()\n\tn.knob('skewX').setExpression('parent.\{0\}.skewX'.format(target_name))\n\tn.knob('skewY').clearAnimated()\n\tn.knob('skewY').setExpression('parent.\{0\}.skewY'.format(target_name))\n\tn.knob('center').clearAnimated()\n\tn.knob('center').setExpression('parent.\{0\}.center'.format(target_name))\nif __name__ == '__main__':\n\tdel_relative()"}
addUserKnob {1 link_target l "Link Target" t "Type in a node name to link to."}
addUserKnob {22 set_target l "Set Target" t "Sets the link target to the selected node.\n\nIf no node is selected, set target node to the value of Link Target." -STARTLINE T "# Set Target Button\ndef link_to_target():\n\ttrans = nuke.thisNode()\n\tselected_nodes = nuke.selectedNodes()\n\tif len(selected_nodes) is 0:\n\t\ttarget_name = nuke.thisNode().knob('link_target').getValue()\n\t\ttarget_node = nuke.toNode(target_name)\n\t\tif target_node is None:\n\t\t\tnuke.message('Target node does not exist!')\n\t\t\treturn\n\tif len(selected_nodes) is 1:\n\t\ttarget_node = selected_nodes\[0]\n\t\ttarget_name = target_node.name()\n\t\ttrans.knob('link_target').setValue(target_name)\n\tif len(selected_nodes) > 1:\n\t\tprint 'Error: Exactly 1 target node must be specified.'\n\t\treturn\n\ttarget_class = target_node.Class()\n\tif target_class in \['Tracker3', 'Tracker4', 'Transform', 'TransformMasked']:\n\t\ttrans.knob('translate').clearAnimated()\n\t\ttrans.knob('translate').setExpression('parent.\{0\}.translate - parent.\{0\}.translate(identity_frame)'.format(target_name))\n\t\ttrans.knob('rotate').clearAnimated()\n\t\ttrans.knob('rotate').setExpression('parent.\{0\}.rotate - parent.\{0\}.rotate(identity_frame)'.format(target_name))\n\t\ttrans.knob('scale').clearAnimated()\n\t\ttrans.knob('scale').setExpression('parent.\{0\}.scale / parent.\{0\}.scale(identity_frame)'.format(target_name))\n\t\ttrans.knob('skewX').clearAnimated()\n\t\ttrans.knob('skewX').setExpression('parent.\{0\}.skewX - parent.\{0\}.skewX(identity_frame)'.format(target_name))\n\t\ttrans.knob('skewY').clearAnimated()\n\t\ttrans.knob('skewY').setExpression('parent.\{0\}.skewY - parent.\{0\}.skewY(identity_frame)'.format(target_name))\n\t\ttrans.knob('center').clearAnimated()\n\t\ttrans.knob('center').setExpression('parent.\{0\}.center+parent.\{0\}.translate(identity_frame)'.format(target_name))\n\t\tif target_class in \['Tracker3', 'Tracker4']:\n\t\t\ttrans.knob('identity_frame').setValue( int(nuke.toNode(target_name).knob('reference_frame').getValue()) )\n\telse:\n\t\tprint 'Error: Must select a Tracker or Transform class node.'\nif __name__ == '__main__':\n\tlink_to_target()"}
addUserKnob {22 bake_link l "Bake Expression Links" t "Bake expression links to keyframes" T "# Bake Expression Links Button\ndef bake_expression_links():\n\ttrans = nuke.thisNode()\n\tlink_target_name = trans.knob('link_target').getValue()\n\ttarget_node = nuke.toNode(link_target_name)\n\tif target_node.knob('translate').isAnimated():\n\t\t# Get animation framerange from translate knob of target tracker node\n\t\ttarget_anims = target_node.knob('translate').animations()\n\t\tfirst_key = target_anims\[0].keys()\[0].x\n\t\tlast_key = target_anims\[0].keys()\[-1].x\n\telse:\n\t\tnuke.message('No Keys on Source!')\n\t\treturn\n\t# Bake knob values\n\tdef bake_knob( node, knob, first_key, last_key):\n\t\tfirst_key = str(first_key)\n\t\tlast_key = str(last_key)\n\t\tdef horizontal_ends(knob, i):\n\t\t\t# Set start and end keyframe to horizontal interpolation so it matches expression before and after animation\n\t\t\tanim = knob.animation(i)\n\t\t\tanim.changeInterpolation( \[anim.keys()\[0], anim.keys()\[-1]], nuke.HORIZONTAL)\n\t\t\treturn\n\t\tif knob.width() == 1:\n\t\t\tnuke.animation('\{0\}.\{1\}'.format(node.name(), knob.name()), 'generate', (first_key, last_key, '1', 'y', '\{0\}'.format(knob.name())))\n\t\t\thorizontal_ends(knob, 0)\n\t\tif knob.width() == 2: \n\t\t\tif knob.name() == 'scale':\n\t\t\t\tif knob.singleValue() == True:\n\t\t\t\t\tnuke.animation('\{0\}.scale'.format(node.name()), 'generate', (first_key, last_key, '1', 'y', 'scale'))\n\t\t\t\t\thorizontal_ends(knob, 0)\n\t\t\t\telse:\n\t\t\t\t\tfor i, dim in enumerate(\['w', 'h']):\n\t\t\t\t\t\tnuke.animation('\{0\}.\{1\}.\{2\}'.format(node.name(), knob.name(), dim), 'generate', (first_key, last_key, '1', 'y', '\{0\}.\{1\}'.format(knob.name(), dim)))\n\t\t\t\t\t\thorizontal_ends(knob, i)\n\t\t\telse:\n\t\t\t\tfor i, dim in enumerate(\['x', 'y']):\n\t\t\t\t\tnuke.animation('\{0\}.\{1\}.\{2\}'.format(node.name(), knob.name(), dim), 'generate', (first_key, last_key, '1', 'y', '\{0\}.\{1\}'.format(knob.name(), dim)))\n\t\t\t\t\thorizontal_ends(knob, i)\n\tfor knob_name, knob in trans.knobs().iteritems():\n\t    if knob_name in \['translate', 'rotate', 'scale', 'skewX', 'skewY', 'center']:\n\t        print 'Baking \{0\}'.format(knob_name)\n\t        bake_knob(trans, knob, first_key, last_key)\nif __name__ == '__main__':\n\tbake_expression_links()" +STARTLINE}
addUserKnob {26 ""}
addUserKnob {7 motionblur_gui l "gui mblur" t "Set the \$gui motion blur value"}
motionblur_gui 0.1
}
