set cut_paste_input [stack 0]
version 12.1 v4
Constant {
 inputs 0
 format "2048 2048 0 0 2048 2048 1 square_2K"
 name Constant1
 note_font Helvetica
 selected true
 xpos -2130
 ypos -909
 postage_stamp false
}
Ramp {
 p0 {0 0}
 p1 {{width} 0}
 color {{parent.PlotSlice.max_value-parent.PlotSlice.min_value}}
 name Ramp5
 note_font Helvetica
 selected true
 xpos -2130
 ypos -885
}
Add {
 channels rgba
 value {{parent.PlotSlice.min_value}}
 name Add1
 note_font Helvetica
 selected true
 xpos -2130
 ypos -861
}
Dot {
 name Dot1
 note_font "Helvetica Bold"
 note_font_size 24
 note_font_color 0xff
 selected true
 xpos -2096
 ypos -798
}
Dot {
 name Dot2
 note_font "Helvetica Bold"
 note_font_size 24
 note_font_color 0xff
 selected true
 xpos -2096
 ypos -630
}
Group {
 name PlotSlice
 selected true
 xpos -1910
 ypos -634
 addUserKnob {20 PlotSlice_tab l PlotSlice}
 addUserKnob {41 useGPUIfAvailable l "Use GPU if available" T PlotSlice.useGPUIfAvailable}
 addUserKnob {12 pos1 l p1}
 addUserKnob {12 pos2 l p2 -STARTLINE}
 pos2 {{width} 0}
 addUserKnob {7 max_value l "max value" R 1 10}
 max_value 1.1
 addUserKnob {7 min_value l "min value" R -1 0}
 min_value -0.1
 addUserKnob {4 style M {replace over right bottom ""}}
 addUserKnob {6 antialias t "enable antialiasing. prettier, at the cost of speed." -STARTLINE}
 addUserKnob {6 draw_lines l "draw lines" t "draw horizontal lines every whole number" -STARTLINE}
 draw_lines true
 addUserKnob {18 lines_color l "lines color"}
 lines_color 0.1
 addUserKnob {6 lines_color_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
}
 Input {
  inputs 0
  name Input
  xpos -810
  ypos -658
 }
 Dot {
  name Dot13
  note_font_size 42
  note_font_color 0x7f7f7f01
  xpos -776
  ypos -558
 }
set Naf08e10 [stack 0]
 Dot {
  name Dot12
  note_font_size 42
  note_font_color 0x7f7f7f01
  xpos -556
  ypos -558
 }
set N2b4bd4d0 [stack 0]
 Transform {
  translate {{-parent.pos1} {-parent.pos1}}
  black_outside false
  name Transform4
  label T
  xpos -590
  ypos -520
 }
 Transform {
  rotate {{"-degrees( atan2(parent.pos2.y-parent.pos1.y, parent.pos2.x-parent.pos1.x) )"}}
  black_outside false
  name Transform5
  label "R\n"
  xpos -590
  ypos -472
 }
 Transform {
  scale {{"width / sqrt(pow(parent.pos2.x-parent.pos1.x,2) + pow(parent.pos2.y-parent.pos1.y,2))"}}
  black_outside false
  name Transform6
  label S
  xpos -590
  ypos -424
 }
set Na5f9be0 [stack 0]
 Crop {
  box {0 0 {Input.width} 1}
  reformat true
  crop false
  name Crop1
  xpos -700
  ypos -418
 }
 Expression {
  expr0 r/max_val-(min_val/max_val)
  expr1 g/max_val-(min_val/max_val)
  expr2 b/max_val-(min_val/max_val)
  expr3 a/max_val-(min_val/max_val)
  name Fit
  xpos -700
  ypos -394
  addUserKnob {20 Param}
  addUserKnob {7 max_val R 1 10}
  max_val {{parent.max_value+fabs(parent.min_value)}}
  addUserKnob {7 min_val R -1 0}
  min_val {{parent.min_value}}
 }
 Reformat {
  type "to box"
  box_width {{Input.width}}
  box_height {{Input.height}}
  box_fixed true
  resize distort
  filter impulse
  name Reformat1
  xpos -700
  ypos -370
 }
 Expression {
  temp_name0 c
  temp_expr0 0.8
  expr0 "fabs((y/height)-r)<=tolerance ? c : 0"
  expr1 "fabs((y/height)-g)<=tolerance ? c : 0"
  expr2 "fabs((y/height)-b)<=tolerance ? c : 0"
  expr3 "fabs((y/height)-a)<=tolerance ? c : 0"
  name PlotSlice_
  xpos -700
  ypos -344
  addUserKnob {20 User}
  addUserKnob {7 tolerance}
  tolerance 0.0007
 }
push $Na5f9be0
 Reformat {
  type "to box"
  box_width {{"\[exists input] ? input.width : root.width"}}
  box_height {{"\[exists input] ? input.height : root.height"}}
  box_fixed true
  box_pixel_aspect {{"\[exists input] ? input.pixel_aspect : root.pixel_aspect"}}
  resize none
  black_outside true
  name BboxRemove
  xpos -590
  ypos -370
 }
 BlinkScript {
  recompileCount 3
  KernelDescription "2 \"PlotSlice\" iterate pixelWise a85c49a08f78aaad29c10667611d0922f3ade835175dd677155ef71c6ca45491 2 \"src\" Read Random \"dst\" Write Random 7 \"plot_input\" Bool 1 AA== \"color\" Float 1 AAAAAA== \"max_val\" Float 1 AAAAAA== \"min_val\" Float 1 AAAAAA== \"draw_lines\" Bool 1 AA== \"tolerance\" Float 1 AAAAAA== \"lines_color\" Float 3 AAAAAAAAAAAAAAAAAAAAAA== 7 \"plot_input\" 1 1 \"color\" 1 1 \"max_val\" 1 1 \"min_val\" 1 1 \"draw_lines\" 1 1 \"tolerance\" 1 1 \"lines_color\" 3 1 0"
  kernelSource "kernel PlotSlice : public ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessRandom, eEdgeClamped> src;\n  Image<eWrite, eAccessRandom> dst;\n\n  param:\n    bool plot_input;\n    float color;\n    float max_val;\n    float min_val;\n    bool draw_lines;\n    float tolerance;\n    float3 lines_color;\n\n  float gaussian(float d, float a, float expv) \{\n    return max(0.0f, exp(-a*d*d)-expv);\n  \}\n\n  float gaussian_filter(float x, float y, float r) \{\n    // return gaussian weighted distance from origin (0, 0)\n    // given coordinate (x, y) and radius r\n    float a = 1.5f; // rate falloff\n    float expv = exp(-a*r*r);\n    return gaussian(x, a, expv) * gaussian(y, a, expv);\n  \}\n\n  void write(float x, float y, int k, float c) \{\n    int n = 2;\n    int u0 = round(x);\n    int v0 = round(y);\n    // skip if center pixel weight is greater than tolerance\n    // if ( dst.bounds.inside(u0, v0)) \{\n    //   if (dst(u0, v0, 3) >= tolerance) return;\n    // \}\n    // loop over neighborhood\n    for (int j = -n; j <= n; j++) \{\n      int v = v0 + j;\n      for (int i = -n; i <= n; i++) \{\n        int u = u0 + i;\n        if ( dst.bounds.inside(u, v)) \{\n          // get filter weight for coord (u,v)\n          float w = gaussian_filter(u-x, v-y, float(n));\n          float c0 = dst(u, v, k); // existing color\n          float w0 = dst(u, v, 3); // existing alpha\n          // merge current color sample over existing color sample\n          dst(u, v, k) = c*w+c0*(1-w);\n          // merge current weight over existing weight\n          dst(u, v, 3) = w+w0*(1-w);\n        \}\n      \}\n    \}\n  \}\n\n  float scale(float x) \{\n    return (x*dst.bounds.height())/(max_val)-((min_val/max_val)*dst.bounds.height());\n  \}\n\n  void process(int2 pos) \{\n    if (pos.y == 0) \{\n      if (draw_lines) \{\n        for (int i = 0; i < max_val; i++) \{\n          for (int k = 0; k < 3; k++) \{\n            write(pos.x, scale(i), k, lines_color\[k]);\n          \}\n        \}\n      \}\n      if (plot_input) \{\n        float4 source = src(pos.x, pos.y);\n        for (int i = 0; i < 3; i++)\{\n          write(pos.x, scale(source\[i]), i, color);\n        \}\n      \}\n    \}\n  \}\n\};"
  rebuild ""
  PlotSlice_plot_input {{parent.antialias}}
  PlotSlice_color 0.6
  PlotSlice_max_val {{parent.max_value+fabs(parent.min_value)}}
  PlotSlice_min_val {{parent.min_value}}
  PlotSlice_draw_lines {{parent.draw_lines}}
  PlotSlice_tolerance 1.01
  PlotSlice_lines_color {{parent.lines_color.r} {parent.lines_color.g} {parent.lines_color.b}}
  rebuild_finalise ""
  name PlotSlice
  xpos -590
  ypos -328
 }
 Merge2 {
  inputs 2
  bbox B
  name Switch_Method
  xpos -590
  ypos -274
  disable {{parent.antialias}}
 }
 Matrix {
  channels rgba
  matrix {
      {1 2 1}
      {2 4 2}
      {1 2 1}
    }
  normalize true
  name Antialias
  xpos -590
  ypos -226
 }
 Keyer {
  operation "luminance key"
  name Keyer1
  xpos -590
  ypos -184
 }
set N2ad3eaa0 [stack 0]
push $N2b4bd4d0
 ContactSheet {
  inputs 2
  width {{Input.width}}
  height {{Input.height*2}}
  rows 2
  columns 1
  roworder TopBottom
  name ContactSheet2
  label Bottom
  xpos -370
  ypos -184
 }
push $N2ad3eaa0
push $N2b4bd4d0
 ContactSheet {
  inputs 2
  width {{Input.width*2}}
  height {{Input.height}}
  rows 1
  columns 2
  name ContactSheet1
  label Right
  xpos -480
  ypos -184
 }
push $N2ad3eaa0
push $Naf08e10
 Merge2 {
  inputs 2
  name Merge1
  xpos -810
  ypos -178
 }
push $N2ad3eaa0
 Switch {
  inputs 4
  which {{parent.style}}
  name switch_plot_type
  xpos -810
  ypos -106
 }
 Output {
  name Output
  xpos -810
  ypos -34
 }
end_group
